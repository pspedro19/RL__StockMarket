#!/usr/bin/env python3
"""
Script mejorado para descargar datos hist√≥ricos de MT5
"""
import os
import sys
import pandas as pd
import MetaTrader5 as mt5
from datetime import datetime, timedelta
from dotenv import load_dotenv

def download_symbol_data(symbol, days=30, timeframe=mt5.TIMEFRAME_M1):
    """Descargar datos de un s√≠mbolo espec√≠fico"""
    
    # Verificar que el s√≠mbolo est√© disponible
    symbol_info = mt5.symbol_info(symbol)
    if symbol_info is None:
        print(f"‚ùå S√≠mbolo {symbol} no encontrado")
        return None
    
    # Asegurar que el s√≠mbolo est√© seleccionado
    if not mt5.symbol_select(symbol, True):
        print(f"‚ùå No se pudo seleccionar {symbol}")
        return None
    
    # Calcular fechas
    date_to = datetime.now()
    date_from = date_to - timedelta(days=days)
    
    print(f"üìä Descargando {symbol} ({days} d√≠as)...")
    
    # Obtener datos
    rates = mt5.copy_rates_range(symbol, timeframe, date_from, date_to)
    
    if rates is None or len(rates) == 0:
        print(f"‚ùå No se pudieron obtener datos de {symbol}")
        print(f"   Error: {mt5.last_error()}")
        return None
    
    # Convertir a DataFrame
    df = pd.DataFrame(rates)
    df['time'] = pd.to_datetime(df['time'], unit='s')
    df['symbol'] = symbol
    
    # Reordenar columnas
    df = df[['time', 'symbol', 'open', 'high', 'low', 'close', 'tick_volume', 'real_volume', 'spread']]
    
    print(f"‚úÖ {symbol}: {len(df)} registros descargados")
    print(f"   Per√≠odo: {df['time'].min()} a {df['time'].max()}")
    
    return df

def main():
    """Funci√≥n principal"""
    print("üöÄ DESCARGA DE DATOS HIST√ìRICOS")
    print("=" * 50)
    
    # Cargar configuraci√≥n
    load_dotenv()
    
    # Conectar a MT5
    print("üì° Conectando a MT5...")
    
    if not mt5.initialize():
        print(f"‚ùå Error inicializando MT5: {mt5.last_error()}")
        return
    
    # Login
    login = int(os.getenv('MT5_LOGIN'))
    password = os.getenv('MT5_PASSWORD')
    server = os.getenv('MT5_SERVER')
    
    authorized = mt5.login(login, password=password, server=server)
    
    if not authorized:
        print(f"‚ùå Error de login: {mt5.last_error()}")
        mt5.shutdown()
        return
    
    print("‚úÖ Conectado a MT5")
    
    # Obtener lista de s√≠mbolos
    symbols_config = os.getenv('SYMBOLS', 'EURUSD,GBPUSD,USDCAD')
    symbols = [s.strip() for s in symbols_config.split(',') if s.strip()]
    
    print(f"üìã S√≠mbolos a descargar: {symbols}")
    
    # Crear directorio de datos
    os.makedirs('data/raw', exist_ok=True)
    
    # Descargar cada s√≠mbolo
    all_data = []
    successful_downloads = 0
    
    for symbol in symbols:
        try:
            df = download_symbol_data(symbol, days=30)  # 30 d√≠as de datos
            
            if df is not None:
                # Guardar archivo individual
                filename = f'data/raw/{symbol}_30days.csv'
                df.to_csv(filename, index=False)
                print(f"üíæ Guardado: {filename}")
                
                all_data.append(df)
                successful_downloads += 1
            
        except Exception as e:
            print(f"‚ùå Error descargando {symbol}: {e}")
    
    # Combinar todos los datos
    if all_data:
        combined_df = pd.concat(all_data, ignore_index=True)
        combined_df = combined_df.sort_values(['symbol', 'time'])
        
        # Guardar archivo combinado
        combined_filename = 'data/raw/all_symbols_combined.csv'
        combined_df.to_csv(combined_filename, index=False)
        print(f"üíæ Archivo combinado guardado: {combined_filename}")
        
        # Estad√≠sticas finales
        print("\nüìä ESTAD√çSTICAS DE DESCARGA:")
        print("=" * 30)
        print(f"S√≠mbolos exitosos: {successful_downloads}/{len(symbols)}")
        print(f"Total registros: {len(combined_df):,}")
        print(f"Rango de fechas: {combined_df['time'].min()} a {combined_df['time'].max()}")
        
        # Mostrar datos por s√≠mbolo
        for symbol in combined_df['symbol'].unique():
            symbol_data = combined_df[combined_df['symbol'] == symbol]
            print(f"  {symbol}: {len(symbol_data):,} registros")
    
    # Desconectar
    mt5.shutdown()
    print("\n‚úÖ Descarga completada!")

if __name__ == "__main__":
    main()
