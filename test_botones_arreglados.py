#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ TEST DE BOTONES ARREGLADOS - VERIFICACI√ìN COMPLETA
Verifica que todos los botones funcionen sin cerrar el dashboard
"""

import sys
import os

# Agregar directorio ra√≠z al path
root_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(root_dir)

from src.agents.real_time_trading_system import RealTimeTradingSystem

def test_botones_arreglados():
    """Probar que los botones no cierren el dashboard"""
    print("üß™ INICIANDO PRUEBA DE BOTONES ARREGLADOS")
    print("=" * 60)
    
    try:
        # Crear sistema con modelo t√©cnico (m√°s estable)
        print("üîß Creando sistema de trading...")
        system = RealTimeTradingSystem(selected_model='technical')
        
        if not system:
            print("‚ùå Error creando sistema")
            return False
        
        print("‚úÖ Sistema creado exitosamente")
        
        # Crear dashboard con botones
        print("\nüìä Creando dashboard con botones arreglados...")
        
        dashboard_created = system.create_live_dashboard()
        
        if dashboard_created:
            print("‚úÖ Dashboard creado exitosamente")
            print("\nüéÆ BOTONES DISPONIBLES:")
            print("   ‚ñ∂Ô∏è  = Iniciar trading en tiempo real")
            print("   ‚è∏Ô∏è  = Pausar trading")
            print("   ‚èπÔ∏è  = Detener trading completamente")
            print("   üîÑ  = Refresh/Reiniciar datos")
            print("   ‚è©  = Cambiar vista de panel derecho")
            print("   ü§ñ  = Toggle modo autom√°tico")
            print("\n" + "=" * 60)
            print("üî¨ INSTRUCCIONES DE PRUEBA:")
            print("1. Presiona cada bot√≥n UNO POR UNO")
            print("2. Verifica que el dashboard NO se cierre")
            print("3. Observa los mensajes en consola")
            print("4. Cada bot√≥n debe mostrar mensajes informativos")
            print("5. Si alg√∫n bot√≥n causa errores, ser√°n capturados y mostrados")
            print("6. Cierra la ventana cuando termines de probar")
            print("=" * 60)
            
            # Mantener la ventana abierta
            try:
                import matplotlib.pyplot as plt
                plt.show(block=True)  # Bloquear hasta que se cierre la ventana
                print("‚úÖ Prueba completada - Dashboard cerrado correctamente")
                return True
                
            except KeyboardInterrupt:
                print("\n‚ö†Ô∏è Prueba interrumpida por usuario")
                return True
                
        else:
            print("‚ùå Error creando dashboard")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en prueba: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO TEST DE BOTONES ARREGLADOS")
    print("Este test verifica que los botones no cierren el dashboard")
    
    success = test_botones_arreglados()
    
    if success:
        print("\nüéâ TEST EXITOSO - Los botones funcionan correctamente")
    else:
        print("\n‚ùå TEST FALL√ì - Revisar errores arriba")
    
    return success

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Test interrumpido por usuario")
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {e}")
        import traceback
        traceback.print_exc() 