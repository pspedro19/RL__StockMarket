#!/usr/bin/env python3

"""
Test espec√≠fico para verificar carga de modelos ML de PPO y A2C
"""

import sys
import os

# Agregar el directorio src al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

try:
    from src.agents.comparison_four_models import FourModelsComparison
    import numpy as np
    import traceback
    
    def test_models_loading():
        """
        Test que verifica que TODOS los modelos cargan correctamente sus ML models
        """
        
        print("\n" + "="*70)
        print("üß™ TEST: Verificaci√≥n de carga de modelos ML")
        print("="*70)
        
        # Crear comparaci√≥n
        comparison = FourModelsComparison()
        
        # Inicializar sistemas sin crear interfaz
        comparison.initialize_systems()
        
        print("\nüîç ESTADO DE MODELOS ML:")
        print("-" * 50)
        
        models = ['DQN', 'DeepDQN', 'PPO', 'A2C']
        systems = [comparison.dqn_system, comparison.deepdqn_system, 
                  comparison.ppo_system, comparison.a2c_system]
        
        ml_loaded = {}
        
        for name, system in zip(models, systems):
            has_ml = system.ml_model is not None
            ml_loaded[name] = has_ml
            
            status = "‚úÖ CARGADO" if has_ml else "‚ùå NO CARGADO"
            action_space = system.action_space
            ml_weight = system.ml_weight
            
            print(f"{name:8s}: {status} | Action Space: {action_space} | ML Weight: {ml_weight}")
            
            if has_ml:
                # Test de predicci√≥n
                try:
                    state = system.get_state()
                    action = system.ml_model.predict(state, deterministic=True)[0]
                    print(f"          Test Prediction: {action}")
                except Exception as e:
                    print(f"          ‚ö†Ô∏è Error en predicci√≥n: {e}")
        
        print("\nüéØ OBJETIVO:")
        print("-" * 50)
        print("Todos los modelos deber√≠an cargar exitosamente:")
        print("- DQN: ‚úÖ (Discrete(2))")
        print("- DeepDQN: ‚úÖ (Discrete(2))")
        print("- PPO: ‚úÖ (Discrete(2))")
        print("- A2C: ‚úÖ (Discrete(2) o Box continuo)")
        
        print("\nüìä RESULTADOS:")
        print("-" * 50)
        
        success_count = sum(ml_loaded.values())
        total_count = len(ml_loaded)
        
        print(f"Modelos cargados exitosamente: {success_count}/{total_count}")
        
        if success_count == total_count:
            print("üéâ ¬°√âXITO! Todos los modelos ML est√°n funcionando")
            return True
        else:
            print("‚ö†Ô∏è Algunos modelos no cargaron - usando an√°lisis t√©cnico como fallback")
            
            # Verificar que al menos funcionan con an√°lisis t√©cnico
            print("\nüîç VERIFICANDO FALLBACK A AN√ÅLISIS T√âCNICO:")
            print("-" * 50)
            
            for name, system in zip(models, systems):
                if not ml_loaded[name]:
                    try:
                        # Test de se√±al t√©cnica
                        signal = system.generate_combined_signal(55)  # Step con suficiente historia
                        print(f"{name:8s}: Se√±al t√©cnica = {signal:+6.3f} ‚úÖ")
                    except Exception as e:
                        print(f"{name:8s}: Error en se√±al t√©cnica = {e} ‚ùå")
            
            return False
        
    if __name__ == "__main__":
        success = test_models_loading()
        if success:
            print("\n‚úÖ CONCLUSI√ìN: Sistema listo para trading con modelos ML")
        else:
            print("\n‚ö†Ô∏è CONCLUSI√ìN: Sistema funciona pero algunos modelos usan an√°lisis t√©cnico")
        
except Exception as e:
    print(f"\n‚ùå Error en test: {e}")
    traceback.print_exc() 